{"version":3,"sources":["webpack:///./src/components/bio.js","webpack:///./src/templates/blog-post.js"],"names":["Bio","data","useStaticQuery","author","site","siteMetadata","social","style","display","marginBottom","rhythm","name","href","github","target","rel","summary","BlogPostTemplate","pageContext","location","post","markdownRemark","siteTitle","title","previous","next","frontmatter","description","excerpt","itemScope","itemType","itemProp","marginTop","scale","date","dangerouslySetInnerHTML","__html","html","flexWrap","justifyContent","listStyle","padding","to","fields","slug","pageQuery"],"mappings":"6FAAA,iDAqDeA,IAzCH,WAAO,IAAD,IACVC,EAAOC,yBAAe,aAiBtBC,EAAM,UAAGF,EAAKG,KAAKC,oBAAb,aAAG,EAAwBF,OACjCG,EAAM,UAAGL,EAAKG,KAAKC,oBAAb,aAAG,EAAwBC,OAEvC,OACE,yBACEC,MAAO,CACLC,QAAQ,OACRC,aAAcC,YAAO,QAGtBP,aAAA,EAAAA,EAAQQ,OACP,yCAEE,uBAAGC,KAAI,uBAAwBN,aAAxB,EAAwBA,EAAQO,QAAUC,OAAO,SAASC,IAAI,cACnE,gCAASZ,EAAOQ,MAAc,8BAEhC,4BAAIR,aAAA,EAAAA,EAAQa,UAAW,U,kCC9CjC,sIAoFeC,UA5EU,SAAC,GAAqC,IAAD,EAAlChB,EAAkC,EAAlCA,KAAMiB,EAA4B,EAA5BA,YAAaC,EAAe,EAAfA,SACvCC,EAAOnB,EAAKoB,eACZC,GAAY,UAAArB,EAAKG,KAAKC,oBAAV,eAAwBkB,QAAxB,QACVC,EAAmBN,EAAnBM,SAAUC,EAASP,EAATO,KAElB,OACE,kBAAC,IAAD,CAAQN,SAAUA,EAAUI,MAAOD,GACjC,kBAAC,IAAD,CACEC,MAAOH,EAAKM,YAAYH,MACxBI,YAAaP,EAAKM,YAAYC,aAAeP,EAAKQ,UAEpD,6BAASC,WAAS,EAACC,SAAS,6BAC1B,gCACE,wBACEC,SAAS,WACTxB,MAAO,CACLyB,UAAWtB,YAAO,GAClBD,aAAc,IAGfW,EAAKM,YAAYH,OAEpB,uBACEhB,MAAK,iBACA0B,aAAM,IADN,CAEHzB,QAAQ,QACRC,aAAcC,YAAO,MAGtBU,EAAKM,YAAYQ,OAGtB,6BACEC,wBAAyB,CAAEC,OAAQhB,EAAKiB,MACxCN,SAAS,gBAEX,wBACExB,MAAO,CACLE,aAAcC,YAAO,MAGzB,gCACE,kBAAC,IAAD,QAIJ,6BACE,wBACEH,MAAO,CACLC,QAAQ,OACR8B,SAAS,OACTC,eAAe,gBACfC,UAAU,OACVC,QAAS,IAGX,4BACGjB,GACC,kBAAC,OAAD,CAAMkB,GAAIlB,EAASmB,OAAOC,KAAM7B,IAAI,QAApC,KACKS,EAASE,YAAYH,QAI9B,4BACGE,GACC,kBAAC,OAAD,CAAMiB,GAAIjB,EAAKkB,OAAOC,KAAM7B,IAAI,QAC7BU,EAAKC,YAAYH,MADpB,WAaP,IAAMsB,EAAS","file":"component---src-templates-blog-post-js-a13f5d16376bf0d69581.js","sourcesContent":["/**\n * Bio component that queries for data\n * with Gatsby's useStaticQuery component\n *\n * See: https://www.gatsbyjs.org/docs/use-static-query/\n */\n\nimport React from \"react\"\nimport { useStaticQuery, graphql } from \"gatsby\"\n\nimport { rhythm } from \"../utils/typography\"\n\nconst Bio = () => {\n  const data = useStaticQuery(graphql`\n    query BioQuery {\n      site {\n        siteMetadata {\n          author {\n            name\n            summary\n          }\n          social {\n            github\n          }\n        }\n      }\n    }\n  `)\n\n  // Set these values by editing \"siteMetadata\" in gatsby-config.js\n  const author = data.site.siteMetadata?.author\n  const social = data.site.siteMetadata?.social\n\n  return (\n    <div\n      style={{\n        display: `flex`,\n        marginBottom: rhythm(2.5),\n      }}\n    >\n      {author?.name && (\n        <p>\n          Written by&nbsp;\n          <a href={`https://github.com/${social?.github}`} target=\"_blank\" rel=\"noreferrer\">\n            <strong>{author.name}</strong><br/>\n          </a>\n          <i>{author?.summary || null}</i>\n        </p>\n      )}\n    </div>\n  )\n}\n\nexport default Bio\n","import React from \"react\"\nimport { Link, graphql } from \"gatsby\"\n\nimport Bio from \"../components/bio\"\nimport Layout from \"../components/layout\"\nimport SEO from \"../components/seo\"\nimport { rhythm, scale } from \"../utils/typography\"\n\nconst BlogPostTemplate = ({ data, pageContext, location }) => {\n  const post = data.markdownRemark\n  const siteTitle = data.site.siteMetadata?.title || `Title`\n  const { previous, next } = pageContext\n\n  return (\n    <Layout location={location} title={siteTitle}>\n      <SEO\n        title={post.frontmatter.title}\n        description={post.frontmatter.description || post.excerpt}\n      />\n      <article itemScope itemType=\"http://schema.org/Article\">\n        <header>\n          <h1\n            itemProp=\"headline\"\n            style={{\n              marginTop: rhythm(1),\n              marginBottom: 0,\n            }}\n          >\n            {post.frontmatter.title}\n          </h1>\n          <p\n            style={{\n              ...scale(-1 / 5),\n              display: `block`,\n              marginBottom: rhythm(1),\n            }}\n          >\n            {post.frontmatter.date}\n          </p>\n        </header>\n        <section\n          dangerouslySetInnerHTML={{ __html: post.html }}\n          itemProp=\"articleBody\"\n        />\n        <hr\n          style={{\n            marginBottom: rhythm(1),\n          }}\n        />\n        <footer>\n          <Bio />\n        </footer>\n      </article>\n\n      <nav>\n        <ul\n          style={{\n            display: `flex`,\n            flexWrap: `wrap`,\n            justifyContent: `space-between`,\n            listStyle: `none`,\n            padding: 0,\n          }}\n        >\n          <li>\n            {previous && (\n              <Link to={previous.fields.slug} rel=\"prev\">\n                ← {previous.frontmatter.title}\n              </Link>\n            )}\n          </li>\n          <li>\n            {next && (\n              <Link to={next.fields.slug} rel=\"next\">\n                {next.frontmatter.title} →\n              </Link>\n            )}\n          </li>\n        </ul>\n      </nav>\n    </Layout>\n  )\n}\n\nexport default BlogPostTemplate\n\nexport const pageQuery = graphql`\n  query BlogPostBySlug($slug: String!) {\n    site {\n      siteMetadata {\n        title\n      }\n    }\n    markdownRemark(fields: { slug: { eq: $slug } }) {\n      id\n      excerpt(pruneLength: 160)\n      html\n      frontmatter {\n        title\n        date(formatString: \"MMMM DD, YYYY\")\n        description\n      }\n    }\n  }\n`\n"],"sourceRoot":""}